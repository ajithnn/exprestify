{
  "name": "exprestify",
  "version": "0.3.0",
  "description": "REST API built using express framework,with support for socket io and adding custom headers at server side",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ajithnn/exprestify.git"
  },
  "keywords": [
    "express",
    "REST",
    "JSON",
    "Multipart form",
    "GET POST"
  ],
  "author": {
    "name": "Ajith N N",
    "email": "ajithnn20@gmail.com"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/ajithnn/exprestify/issues"
  },
  "homepage": "https://github.com/ajithnn/exprestify",
  "dependencies": {
    "body-parser": "^1.10.0",
    "express": "^4.10.6",
    "http": "0.0.0",
    "multer": "^0.1.6",
    "pem": "^1.4.4"
  },
  "readme": "# Exprestify\n\n  REST API Module built on top of Express. This project was created as creating REST CRUD calls on express required \n  multiple dependencies. This is an effort to combine all those dependencies to provide a simpler interface.\n  \n## Features\n\n  - POST interface which can handle JSON/form-encoded data in a single interface.\n  - Multipart Post interface which can handle both files and fields, built on multer.\n  - GET and GETFILE interface to easily create GET calls.\n  - PUT and DELETE functions. \n\n## Installation\n\nTo install exprestify run:\n\n    $ npm install exprestify\n\nTo add to your project as a dependency:\n\n    $ npm install --save exprestify\n \n## Usage\n\n```js\nvar rest = require('exprestify')\nvar fs = require('fs')\n\nvar creds = {\n    key: fs.readFileSync('./assets/key.pem'),\n    cert: fs.readFileSync('./assets/key-cert.pem')\n}\n\nvar header ={\n\"Access-Control-Allow-Origin\":\"http://localhost:4000\",\n\"Access-Control-Allow-Methods\":\"GET,PUT,POST,DELETE\",\n\"Access-Control-Allow-Headers\":\"Content-Type\"\n};\n\nrest.setHeaders(header);\n\nrest.get('/', \"This is returned\")\nrest.get('/page1', function (err, query, contentType) {\n    if (!err) {\n        console.log(contentType);\n        if (query.value == 1) {\n            return \"This is still page1\";\n        } else {\n            return \"This is page1\";\n        }\n    } else {\n        console.log(err);\n    }\n})\nrest.get('/page2', \"This is page2\")\nrest.get('/page3', \"This is page3\")\nrest.getfile('/index', function (err, query) {\n    if (!err) {\n        if (query.value) {\n            return \"./html/index1.html\";\n        } else {\n            return \"./html/index.html\";\n\n        }\n    } else {\n        console.log(err);\n        return err;\n    }\n})\n\nopt = {\n    extended: false\n}\nvar options = {\n    contentType: \"text\",\n    config: opt\n}\n\nrest.post('/pagepost', function (err, data) {\n    if (!err) {\n        return data;\n    } else {\n        console.log(err);\n    }\n}, options)\n\n\n\nvar multiopt = {\n    FilePath: \"./assets/\",\n    PostType: \"file\",\n    Rename: function () {\n        return \"File1\";\n    }\n}\n\nrest.multipost('/pagemulti', function (err, data) {\n    if (!err) {\n        console.log(data);\n    } else {\n        console.log(err);\n    }\n}, multiopt)\n\n\nvar multiopt1 = {\n    FilePath: \"./html/\",\n    PostType: \"file\",\n    Rename: function (fieldname, filename) {\n        return fieldname;\n    }\n}\n\nrest.multipost('/pagemulti1', function (err, data) {\n    if (!err) {\n        console.log(data);\n    } else {\n        console.log(err);\n    }\n}, multiopt1)\n\n\nrest.put('/api/put/:id', function (err, data) {\n    if (!err) {\n        console.log(data);\n        return \"Updated id \" + data.id\n    } else {\n        console.log(err);\n    }\n})\n\nrest.delete('/api/delete/:id', function (err, data) {\n    if (!err) {\n        console.log(data);\n        return \"Deleted id \" + data.id\n    } else {\n        console.log(err);\n    }\n})\n\n\n\nrest.listens(3443, creds, function () {\n    console.log(\"Listening on port 0.0.0.0:%s\", rest.ports)\n})\n\nrest.listen(3000, function () {\n    console.log(\"Listening on port 0.0.0.0:%s\", rest.port)\n})\n```\n## TODO\n\n - Mocha Tests.\n - Add more Multer options to Multipart Post handler.\n\n## License\n\n(The MIT License)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "exprestify@0.3.0",
  "dist": {
    "shasum": "09acc8aaa7b8ae284beb2fe2d1b28434b10a9911"
  },
  "_from": "exprestify@",
  "_resolved": "https://registry.npmjs.org/exprestify/-/exprestify-0.3.0.tgz"
}
